/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input Newsletters : dw.web.FormList
*   @input Account : String
*   @output errorMessage : String
*
*/
importPackage( dw.system );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.web );

function execute( args : PipelineDictionary ) : Number
{
    try {
    	var newsletterList : dw.web.FormList = args.Newsletters;
    	
	    var webref : WebReference = webreferences.UpdateNewsletterSubscriptionsDev;
	    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
	    	webref = webreferences.pUpdateNewsletterSubscriptions;
	    }
		var stub : Stub = webref.defaultService; 
		
		var updateNewsletter:WebReference = new webref.UpdateNewsletterSubscriptionsRequest();
		updateNewsletter.accountID = args.Account;
		
		var newsletterArray : Array = new Array();
		var lineItem;
		
		for (var x = 0; x < newsletterList.childCount; x++) {
			lineItem = newsletterList[x];
			if (lineItem.newsletterlineitem.checked) {
				newsletterArray.push(lineItem.object);
			}
		}
        
        //Dont send request if none were checked
        if (newsletterArray.length > 0) {
			updateNewsletter.newsletterName = newsletterArray;
					
	    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
				var response = stub.pUpdateNewsLetterRequest(updateNewsletter);
		    } else {
				var response = stub.newsLetterRequest(updateNewsletter);
		    }

			if (response.success != "true") {
				Logger.error(response.message);
				args.errorMessage = response.message;
				return PIPELET_NEXT;
			}
        }
        
	}
	catch(e) {
		if(e instanceof Fault){
			Logger.error("Actor " + e.faultActor+" caused fault '"+e.faultCode +"' ("+e.faultString+" - "+e.faultDetail+")");
		}else{
			Logger.error(e.toString());
		}
		return PIPELET_ERROR;
	}
 	return PIPELET_NEXT;
}
