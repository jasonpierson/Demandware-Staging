/**
* Demandware Script File
* To define input and output parameters, create entries of the form: some new comment
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input customerLogin : String 
*   @output newsLetterList : dw.util.List
*
*/
importPackage( dw.system );
importPackage( dw.rpc );
importPackage( dw.util );

function execute( args : PipelineDictionary ) : Number
{
	var account : String = args.customerLogin;
	
	try {
	    
	    var webref : WebReference = webreferences.GetNewsletterSubscriptionsDev;
	    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
	    	webref = webreferences.pGetNewsletterSubscriptions;
	    }
		var stub : Stub = webref.defaultService; 
		
		var getNewsletter:WebReference = new webref.NewsLetterIn();
		getNewsletter.token = new webref.NewsLetterInToken();
		
		getNewsletter.token.accountID = account;
		
	    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
			var response = stub.pNewsLetterRequest(getNewsletter);
		} else {
			var response = stub.newsLetterRequest(getNewsletter);
		}

		if (response.success == "true") {
			var newsletterArray : ArrayList = new ArrayList();
			//Need to iterate through the newsletters to load them
			for each (var newsLetter : String in response.newsletterName)
			{
				newsletterArray.add(newsLetter);
			}
			args.newsLetterList = newsletterArray;
		} 
	}
	catch(e) {
		if(e instanceof Fault){
			Logger.error("Actor " + e.faultActor+" caused fault '"+e.faultCode +"' ("+e.faultString+" - "+e.faultDetail+")");
		}else{
			Logger.error(e.toString());
		}
		return PIPELET_ERROR;
	}
 	
 	return PIPELET_NEXT;
}
