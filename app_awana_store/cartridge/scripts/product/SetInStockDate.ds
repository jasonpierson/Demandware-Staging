/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*   @output EMailContent : Array
*
*/
importPackage( dw.system );
importPackage( dw.catalog );
importPackage( dw.util );
importPackage( dw.crypto );

function execute( args : PipelineDictionary ) : Number
{
	try {	
		var productIterator : dw.util.SeekableIterator = dw.catalog.ProductMgr.queryProductsInCatalog(dw.catalog.CatalogMgr.getSiteCatalog());
		var currentProduct : object = null;
		var functionOutput : Array = new Array();
		var c : dw.util.Calendar = new dw.util.Calendar();
		c.parseByFormat("07/16/2013", "MM/dd/yyyy");
		
		/***************************************************************************************************
		 GO THROUGH EACH PRODUCT IN THE SITE CATALOG
		***************************************************************************************************/
		while (!empty(productIterator) && productIterator.hasNext())
		{
			currentProduct = productIterator.next();
	
			/***************************************************************************************************
			 IF PRODUCT IS BACKORDER-ABLE AND OUT OF STOCK, SET THE IN STOCK DATE
			 OTHERWISE IF PRODUCT IS BACKORDER-ABLE AND NOT OUT OF STOCK, BLANK OUT THE IN STOCK DATE
			***************************************************************************************************/		
			if (!empty(currentProduct) && currentProduct.online && !empty(dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID))) {
				if (dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).allocation == 0 && !empty(dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).backorderable) && dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).backorderable && empty(dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).inStockDate)) {
					dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).setInStockDate(c.getTime());
					if (!empty(dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).inStockDate)) {
						functionOutput.push(currentProduct.ID + " - success");
					} else {
						functionOutput.push(currentProduct.ID + " - failure");	
					}			
				} else if (dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).allocation > 0 && !empty(dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).backorderable) && dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).backorderable && !empty(dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).inStockDate)) {
					dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).setInStockDate(null);
					if (empty(dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).inStockDate)) {
						functionOutput.push(currentProduct.ID + " - success");
					} else {
						functionOutput.push(currentProduct.ID + " - failure");	
					}					
				}
			}
		}
		args.EMailContent = functionOutput;
	}
	
	catch(e) {
		if(e instanceof Fault){
			Logger.error("Actor " + e.faultActor+" caused fault '"+e.faultCode +"' ("+e.faultString+" - "+e.faultDetail+")");
		}else{
			Logger.error(e.toString());
		}
		
		if (e.faultDetail.toUpperCase().indexOf('OPTIMISTIC') == -1) {
			return PIPELET_ERROR;
		}
	}
		
   	return PIPELET_NEXT;
}