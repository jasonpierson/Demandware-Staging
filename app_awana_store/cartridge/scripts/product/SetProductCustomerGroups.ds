/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input cGroup : String
*   @input pCat : String
*   @input fn : String
*
*/
importPackage( dw.system );
importPackage( dw.catalog );
importPackage( dw.util );
importPackage( dw.crypto );

function execute( args : PipelineDictionary ) : Number
{
	try {
		var customerGroup : String = args.cGroup;
		var productCategory : String = args.pCat;
		var func : String = args.fn;
		var catalogCategory : Category = CatalogMgr.getCategory(productCategory); 
		var categoryProducts : Collection = catalogCategory.getProducts();
		var isPublicProduct : Boolean;
				
	    if (categoryProducts == null || categoryProducts.size() <= 0)
	    {
	    	return PIPELET_NEXT;
	    }
	    
		var iter : Iterator = categoryProducts.iterator();
		var categoryProduct : Product = null;
		//loop through products
		while (iter != null && iter.hasNext())
		{
			categoryProduct = iter.next();	
			isPublicProduct = false;
			var customerGroups : Array = new Array();

			//if this is a master product, change the customer groups on all its child products
			if (categoryProduct.isMaster()) {
				var childProducts : Collection = categoryProduct.getVariants();	
				
			    if (childProducts != null && childProducts.size() > 0) {
					var childiter : Iterator = childProducts.iterator();
					var childProduct : Product = null;
					//loop through child products
					while (childiter != null && childiter.hasNext())
					{
						childProduct = childiter.next();
						isPublicProduct = false;
						var customerGroups : Array = new Array();	
						
						if (!empty(childProduct.custom.RestrictedPurchaseCustomerGroupID)) {
							//loop through customer groups
							for (var i = 0; i < childProduct.custom.RestrictedPurchaseCustomerGroupID.length; i++) 
							{								
								if (func == 'Remove') {
									if(childProduct.custom.RestrictedPurchaseCustomerGroupID[i] != customerGroup) {
										customerGroups.push(childProduct.custom.RestrictedPurchaseCustomerGroupID[i]);
									}
								} else {
									if (childProduct.custom.RestrictedPurchaseCustomerGroupID[i] == 'Everyone') {
										isPublicProduct = true;
										break;
									} else {									
										customerGroups.push(childProduct.custom.RestrictedPurchaseCustomerGroupID[i]);
									}
								}								
							}
						}
						if (func == 'Add' && !isPublicProduct) {
							customerGroups.push(customerGroup);
						}
						//replace current customer groups with groups in array
						if (func == 'Add' && !isPublicProduct || func == 'Remove') {
							childProduct.custom.RestrictedPurchaseCustomerGroupID = customerGroups;
						}						
					}			    	
			    }								
			}
			
			//change the customer groups on the master/solo product	
			if (!empty(categoryProduct.custom.RestrictedPurchaseCustomerGroupID)) {
				//loop through customer groups
				for (var i = 0; i < categoryProduct.custom.RestrictedPurchaseCustomerGroupID.length; i++) 
				{
					if (func == 'Remove') {
						if (categoryProduct.custom.RestrictedPurchaseCustomerGroupID[i] != customerGroup) {
							customerGroups.push(categoryProduct.custom.RestrictedPurchaseCustomerGroupID[i]);
						}
					} else {
						if (categoryProduct.custom.RestrictedPurchaseCustomerGroupID[i] == 'Everyone') {
							isPublicProduct = true;
							break;
						} else {							
							customerGroups.push(categoryProduct.custom.RestrictedPurchaseCustomerGroupID[i]);
						}
					}		
				}
			}
			
			if (func == 'Add' && !isPublicProduct) {
				customerGroups.push(customerGroup);
			}
			//replace current customer groups with groups in array
			if (func == 'Add' && !isPublicProduct || func == 'Remove') {
				categoryProduct.custom.RestrictedPurchaseCustomerGroupID = customerGroups;
			}			
		}
	}
	catch(e) {
		if(e instanceof Fault){
			Logger.error("Actor " + e.faultActor+" caused fault '"+e.faultCode +"' ("+e.faultString+" - "+e.faultDetail+")");
		}else{
			Logger.error(e.toString());
		}
		return PIPELET_ERROR;
	}	
	
	return PIPELET_NEXT;
}