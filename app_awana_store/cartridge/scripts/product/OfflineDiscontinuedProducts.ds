/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*   @output EMailContent : Array
*
*/

importPackage( dw.system );
importPackage( dw.catalog );
importPackage( dw.util );
importPackage( dw.crypto );

function execute( args : PipelineDictionary ) : Number
{
	try {	
		var productIterator : dw.util.SeekableIterator = dw.catalog.ProductMgr.queryProductsInCatalog(dw.catalog.CatalogMgr.getSiteCatalog());
		var currentProduct : object = null;
		var functionOutput : Array = new Array();
		
		/***************************************************************************************************
		 GO THROUGH EACH PRODUCT IN THE SITE CATALOG
		***************************************************************************************************/
		while (!empty(productIterator) && productIterator.hasNext())
		{
			currentProduct = productIterator.next();
	
			/***************************************************************************************************
			 IF PRODUCT IS DISCONTINUED, OFFLINE AND MAKE UNSEARCHABLE
			***************************************************************************************************/		
			if (!empty(currentProduct) && currentProduct.online && currentProduct.ID.toUpperCase().indexOf("MV-") == -1 && currentProduct.ID.toUpperCase().indexOf("PS ") != 0) {
				if ((empty(dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).preorderable) || !dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).preorderable) && (empty(dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).backorderable) || !dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).backorderable) && (empty(dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).allocation) || dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).allocation <= 0) && (empty(dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).perpetual) || !dw.catalog.ProductInventoryMgr.getInventoryList().getRecord(currentProduct.ID).perpetual)) {
					currentProduct.setOnlineFlag(false);
					currentProduct.setSearchableFlag(false);
					if (!currentProduct.getOnlineFlag() && !currentProduct.getSearchableFlag()) {
						functionOutput.push(currentProduct.ID + " - success");
					} else {
						functionOutput.push(currentProduct.ID + " - failure");	
					}			
				}	
			}
		}
		args.EMailContent = functionOutput;
	}
	
	catch(e) {
		if(e instanceof Fault){
			Logger.error("Actor " + e.faultActor+" caused fault '"+e.faultCode +"' ("+e.faultString+" - "+e.faultDetail+")");
		}else{
			Logger.error(e.toString());
		}
		
		if (e.faultDetail.toUpperCase().indexOf != 'OPTIMISTIC') {
			return PIPELET_ERROR;
		}
	}
		
   	return PIPELET_NEXT;
}
