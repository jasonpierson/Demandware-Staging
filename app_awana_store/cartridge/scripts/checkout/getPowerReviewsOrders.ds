/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*	@input Orders : dw.util.Iterator the orders to export
*   @output orderString : String
*
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.io );
importPackage( dw.util );

function execute( args : PipelineDictionary ) : Number
{
	
	var orders : Iterator = args.Orders;
	var exportWriter : StringWriter = new StringWriter();	
	
	//First build the header in the string, this is going to be a tab delimited file
	exportWriter.write("order_id,page_id,first_name,last_name,email,order_date\r\n");
	
	while(orders.hasNext())
	{
		var order : Order = orders.next();
		
		//Need to iterate through the products and only report those items
		var products : Iterator = order.productLineItems.iterator();
		while(products.hasNext())
		{
			var product : ProductLineItem = products.next();
 			exportWriter.write(order.orderNo);
			exportWriter.write(",");
			try {
				if (product.product.variant) {
					exportWriter.write(product.product.variationModel.master.ID);
				} else {
					exportWriter.write(product.productID);
				}
			} catch (e) {
				exportWriter.write(product.productID);
			}
			exportWriter.write(",");
			exportWriter.write(esc(order.billingAddress.firstName));
			exportWriter.write(",");
			exportWriter.write(esc(order.billingAddress.lastName));
			exportWriter.write(",");
			exportWriter.write(esc(order.customerEmail));
			exportWriter.write(",");
			exportWriter.write(dw.util.StringUtils.formatCalendar(new dw.util.Calendar(order.creationDate), "MM/dd/yyyy"));
			exportWriter.write("\r\n");		
		}
	}

	exportWriter.flush();
/*
	var file : dw.io.File = new dw.io.File(dw.io.File.IMPEX + '/src/order/powerreviews_order_feed.csv');
	if(!file.exists()){
		if(!file.createNewFile()){
			Logger.error("File "+file.name+" could not be created!");
			return PIPELET_ERROR;
		}
	}else{
		Logger.debug("File "+file.name+" exits and gets overwritten!");
	}	
	
	var out : FileWriter = new FileWriter(file, "UTF-8");
	out.write(exportWriter.toString());
	
	out.flush();
	out.close();
*/	
	args.orderString = exportWriter.toString();
	exportWriter.close();
	
   	return PIPELET_NEXT;
}

function esc(inStr : String) : String
{
	if(inStr == null)
		inStr = "";
		
	var badc : RegExp = /[\"\r\n]/g;
	var tmpStr : String = inStr.replace(badc, " ");

	// Replace non-English characters with their English equivalents...
	tmpStr = tmpStr.replace(/[ÀÁÅÆÂÄÃ]/g, "A");
	tmpStr = tmpStr.replace(/[Ç]/g, "C");
	tmpStr = tmpStr.replace(/[ÈÉÊË]/g, "E");
	tmpStr = tmpStr.replace(/[ÌÍÎÏ]/g, "I");
	tmpStr = tmpStr.replace(/[Ð]/g, "D");
	tmpStr = tmpStr.replace(/[Ñ]/g, "N");
	tmpStr = tmpStr.replace(/[ÒÓÔÕÖØ]/g, "O");
	tmpStr = tmpStr.replace(/[ÙÚÛÜ]/g, "U");
	tmpStr = tmpStr.replace(/[Ý]/g, "Y");
	tmpStr = tmpStr.replace(/[àáâãäåæ]/g, "a");
	tmpStr = tmpStr.replace(/[ç]/g, "c");
	tmpStr = tmpStr.replace(/[èéêë]/g, "e");
	tmpStr = tmpStr.replace(/[ìíîï]/g, "i");
	tmpStr = tmpStr.replace(/[ðòóôõöø]/g, "o");
	tmpStr = tmpStr.replace(/[ùúûü]/g, "u");
	tmpStr = tmpStr.replace(/[ñ]/g, "n");
	tmpStr = tmpStr.replace(/[ÿý]/g, "y");
	tmpStr = tmpStr.replace(/[Þ]/g, "p");
	tmpStr = tmpStr.replace(/[ß]/g, "s");
	tmpStr = tmpStr.replace(/[þ]/g, "b");
	Logger.debug("scrubbed string=" + tmpStr);
	
	// Strip out anything except A-Z, a-z, whitespace, digits and basic punctuation,
	// since the backend can't handle them anyhow.
	var nonAlphaNumPunc : RegExp = /[^\.\w\s\d,!?:;()<>@%$#&-]/g;
	return tmpStr.replace(nonAlphaNumPunc, "");
}