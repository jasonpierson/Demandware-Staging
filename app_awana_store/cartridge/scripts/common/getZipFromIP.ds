/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
* 	@input  IPAddress : String
*   @output ZipCode : String
*
*/
importPackage( dw.system );
importPackage( dw.rpc );
importPackage( dw.util );

function execute( args : PipelineDictionary ) : Number
{
	try {
	    var webref : WebReference = webreferences.GetZipFromIPDev;
	    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
	    	webref = webreferences.pGetZipFromIP;
	    }
		var stub : Stub = webref.defaultService; 
		
		var getZip:WebReference = new webref.GetZipFromIPRequest();
		getZip.request = new webref.GetZipFromIPRequestRequest();
		
		getZip.request.IPAddress = args.IPAddress;
		
	    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
	    	var response = stub.pGetZipFromIP(getZip);
		} else {
	    	var response = stub.getZipFromIP(getZip);
		}
		if (response.response.success == true) {		
			args.ZipCode = response.response.zipCode;
		} else {
			Logger.error(response.response.message);
			return PIPELET_ERROR;
		}
	}
	catch(e) {
		if(e instanceof Fault){
			Logger.error("Actor " + e.faultActor+" caused fault '"+e.faultCode +"' ("+e.faultString+" - "+e.faultDetail+")");
		}else{
			Logger.error(e.toString());
		}
		return PIPELET_ERROR;
	}    
   	return PIPELET_NEXT;
}
