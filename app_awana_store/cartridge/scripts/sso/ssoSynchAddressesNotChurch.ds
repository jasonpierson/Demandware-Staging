/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input custProfile : dw.customer.Profile
*   @input billingAddress : Object
*   @input shippingAddressList : dw.util.List
*
*/
importPackage( dw.system );
importPackage( dw.customer );
importPackage( dw.util );

importScript( "account/Utils.ds" );

function execute( args : PipelineDictionary ) : Number
{
	try
	{
		var billAddr : Object = args.billingAddress;
		var shipList : dw.util.List = args.shippingAddressList;
		var profile : dw.customer.Profile = args.custProfile;
		
		var addressBook :dw.customer.AddressBook = profile.addressBook;
		
		//First remove the current addresses, we want addresses from SF to be used
		if (addressBook!=null && addressBook.addresses!= null && addressBook.addresses.length>0)
		{
			for each(var custAddress:dw.customer.CustomerAddress in addressBook.getAddresses())
			{
				if (custAddress!= null)
					addressBook.removeAddress(custAddress);
			}
		}
		
		//--------------------------
		//Now add the new addresses
		//--------------------------

		//billing address
		if (billAddr != null) {
			var accountAddress:dw.customer.CustomerAddress = addressBook.createAddress(billAddr.ID);
			accountAddress.custom.SFDCAddressID = billAddr.SFDCAddressID.toString();
			accountAddress.firstName = billAddr.firstName.toString();
			accountAddress.lastName = billAddr.lastName.toString();
			accountAddress.address1 = billAddr.address1.toString();
			if (billAddr.addressLine2 != null && billAddr.addressLine2 != "")
				accountAddress.addressLine2 = billAddr.addressLine2.toString();
			accountAddress.city = billAddr.city.toString();
			accountAddress.stateCode = billAddr.stateCode.toString();
			accountAddress.postalCode = billAddr.postalCode.toString();
			if (dw.system.Site.getCurrent().ID == "Awana") {
				accountAddress.countryCode = "US";
			} else {
				if(billAddr.country.length == 2) {
					accountAddress.countryCode = billAddr.country;
				} else if(billAddr.country.length > 2) {
					accountAddress.countryCode = getCountryCodeFromCountryName(billAddr.country);
				}
			}
		}
		
		//Shipping Addresses
		for each(var shipAddr:Object in shipList)
		{
			var accountAddress:dw.customer.CustomerAddress = addressBook.createAddress(shipAddr.ID);
			if (accountAddress!=null) {
				accountAddress.custom.SFDCAddressID = shipAddr.SFDCAddressID.toString();
				accountAddress.firstName = shipAddr.firstName.toString();
				accountAddress.lastName = shipAddr.lastName.toString();
				accountAddress.address1 = shipAddr.address1.toString();
				if (shipAddr.addressLine2 != null && shipAddr.addressLine2 != "")
					accountAddress.addressLine2 = shipAddr.addressLine2.toString();
				accountAddress.city = shipAddr.city.toString();
				accountAddress.stateCode = shipAddr.stateCode.toString();
				accountAddress.postalCode = shipAddr.postalCode.toString();
				if (dw.system.Site.getCurrent().ID == "Awana") {
					accountAddress.countryCode = "US";
				} else {
					if(shipAddr.country.length == 2) {
						accountAddress.countryCode = shipAddr.country;
					} else if(shipAddr.country.length > 2) {
						accountAddress.countryCode = getCountryCodeFromCountryName(shipAddr.country);
					}
				}
			}
		}
	}
	catch(e)
	{
		Logger.error("Error in Address Synch ( {0} )", e.message);
		return PIPELET_ERROR;
	}
	
    return PIPELET_NEXT;
}
