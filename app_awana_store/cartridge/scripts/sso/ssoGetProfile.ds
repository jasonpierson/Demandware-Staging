/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input accountID : String 
*   @output firstName : String
*	@output lastName : String
*	@output accountOnHold : Boolean
*	@output email : String
*	@output customerType : String
*   @output isPurchaser : Boolean
*	@output groupID : String
*	@output groupName : String
*   @output mailingAddressBookID : String
*	@output shippingAddresses : dw.util.List
*	@output billingAddress : Object
*	@output DWCustomerGroups : dw.util.List
*   @output AccountStatus : String
*   @output RegistrationNumber : String
*   @output rewardsChurchId : String
*   @output rewardsChurchName : String
*   @output rewardsChurchPoints : Number
*   @output rewardsSponsoredChurchPoints : Number
*   @output rewardsSponsoredChurchAccountID : String
*   @output isChurchRewardsSponsor : Boolean
*   @output accountRecordType : String
*   @output type : String
*   @output billingContactEMail : String
*
*   
*
*/
importPackage( dw.system );
importPackage( dw.rpc );
importPackage( dw.customer );
importPackage( dw.util );

function execute( args : PipelineDictionary ) : Number
{
try {
		if(dw.system.Site.getCurrent().ID == 'kidzmatter') {
		    var webref : WebReference = webreferences.kmGetSFDCAccountProfileDev;
		    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
		    	webref = webreferences.pKMGetSFDCAccountProfile;
		    }	
		} else {		
		    var webref : WebReference = webreferences.GetSFDCAccountProfileDev;
		    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
		    	webref = webreferences.pGetSFDCAccountProfile;
		    }
		}
		var stub : Stub = webref.defaultService; 
		
		var getProfile:WebReference = new webref.GetSFDCAccountProfileRequest();
		getProfile.request = new webref.GetSFDCAccountProfileRequestRequest();
		
		getProfile.request.SFDCAccountID = args.accountID;
			
	    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
	    	if(dw.system.Site.getCurrent().ID == 'kidzmatter') {
	    		var response = stub.pKMGetSFDCAccountProfile(getProfile);
	    	} else {
	    		var response = stub.pGetSFDCAccountProfile(getProfile);
	    	}
		} else {
			var response = stub.getSFDCAccountProfile(getProfile);
		}
		
		if (response.response.success == "true") {
			//prepare output variables		
			args.firstName = response.response.accountInfo[0].firstName;
			args.lastName = response.response.accountInfo[0].lastName;
			args.email = response.response.accountInfo[0].EMail;
			args.isPurchaser = response.response.accountInfo[0].authorizedPurchaser;
			
			args.mailingAddressBookID = response.response.accountInfo[0].mailingAddressBookID;
			if (!empty(response.response.accountInfo[0].customerType)) {
				if (response.response.accountInfo[0].customerType.indexOf("Commander") > 0) {
				//if (response.response.accountInfo[0].customerType == "Co-Commander" || response.response.accountInfo[0].customerType == "Club Commander") {
					args.customerType = "Commander";
				} else {
					args.customerType = "Purchaser";
				}
				
				if (response.response.accountInfo[0].customerType == "Individual") {
					args.customerType = "Individual";
				} else {
					//Capture the customer group information too!
					if(dw.system.Site.getCurrent().ID == 'Awana' || dw.system.Site.getCurrent().ID == 'essentials' || dw.system.Site.getCurrent().ID == 'AwanaCA') {
						args.accountRecordType = response.response.customerGroupInfo[0].accountRecordType;
						args.type = response.response.customerGroupInfo[0].type;
						args.billingContactEMail = response.response.customerGroupInfo[0].billingContactEMail;
					}				
					if (response.response.customerGroupInfo[0].accountOnHold != "" || response.response.customerGroupInfo[0].accountOnHold != null) {
						args.accountOnHold = response.response.customerGroupInfo[0].accountOnHold;					
					} else {
						args.accountOnHold = false;
					}
	
					if (!empty(response.response.customerGroupInfo[0].customerGroupID)) {				
						args.groupID = response.response.customerGroupInfo[0].customerGroupID;
						args.groupName = response.response.customerGroupInfo[0].groupName;
						args.AccountStatus = response.response.customerGroupInfo[0].accountStatus;	
						args.RegistrationNumber = response.response.customerGroupInfo[0].registrationNumber;			
					}					
					//write account on hold flag to custom object Church
					var custObj : dw.object.CustomObject = dw.object.CustomObjectMgr.getCustomObject("Church", response.response.customerGroupInfo[0].customerGroupID);
					    
					if (custObj != null) {
						custObj.custom.accountOnHold = response.response.customerGroupInfo[0].accountOnHold;
					}
				}
			}
			
			//Now package up the addresses
			if (!empty(response.response.billingAddress) && response.response.billingAddress != null) {
				if (response.response.billingAddress[0].lastName != null)
				{
					var tempAddress : Object = new Object();
					//Create an ID for the address
					tempAddress.ID = blankForNull(response.response.billingAddress[0].addressLine1) + ' ' + 
									 blankForNull(response.response.billingAddress[0].firstName) + ' ' +
									 blankForNull(response.response.billingAddress[0].lastName);
					tempAddress.ID = dw.util.StringUtils.trim(tempAddress.ID); 
					if (response.response.billingAddress[0].lastName == "") {
						tempAddress.firstName = "";
						tempAddress.lastName = blankForNull(response.response.billingAddress[0].firstName);
					}
					else {
						tempAddress.firstName = blankForNull(response.response.billingAddress[0].firstName);
						tempAddress.lastName = blankForNull(response.response.billingAddress[0].lastName);
					}
					tempAddress.address1 = response.response.billingAddress[0]!=null && response.response.billingAddress[0].addressLine1!=null?response.response.billingAddress[0].addressLine1:"";
					if (response.response.billingAddress[0].addressLine2 != null && response.response.billingAddress[0].addressLine2 != "") {
						tempAddress.address2 = response.response.billingAddress[0].addressLine2;
					}
					tempAddress.city = blankForNull(response.response.billingAddress[0].city);
					tempAddress.stateCode = blankForNull(response.response.billingAddress[0].state);
					tempAddress.postalCode = blankForNull(response.response.billingAddress[0].postalCode);
					tempAddress.country = blankForNull(response.response.billingAddress[0].country);
					tempAddress.SFDCAddressID = blankForNull(response.response.billingAddress[0].SFDCAddressID);
					args.billingAddress = tempAddress;
				}
			}
					
			//Now shipping addresses
			if (!empty(response.response.shippingAddress) && response.response.shippingAddress!=null) {
				var shipList:ArrayList = new dw.util.ArrayList();
				for each (shipAddress in response.response.shippingAddress) {
					if (shipAddress.lastName != null && shipAddress.addressLine1 != null && shipAddress.city != null && shipAddress.state != null && shipAddress.postalCode != null) {
						var tempShipAddress : Object = new Object();
						tempShipAddress.ID = blankForNull(shipAddress.addressLine1) + ' ' + 
										 blankForNull(shipAddress.firstName) + ' ' +
										 blankForNull(shipAddress.lastName);
						tempShipAddress.ID = dw.util.StringUtils.trim(tempShipAddress.ID);
						if (shipAddress.lastName == "") {
							tempShipAddress.firstName = "";
							tempShipAddress.lastName = blankForNull(shipAddress.firstName);
						}
						else {
							tempShipAddress.firstName = blankForNull(shipAddress.firstName);
							tempShipAddress.lastName = blankForNull(shipAddress.lastName);
						}						
						tempShipAddress.address1 = blankForNull(shipAddress.addressLine1);
						if (shipAddress.addressLine2 != null && shipAddress.addressLine2 != "") {
							tempShipAddress.address2 = shipAddress.addressLine2;
						}
						tempShipAddress.city = blankForNull(shipAddress.city);
						tempShipAddress.stateCode = blankForNull(shipAddress.state);
						tempShipAddress.postalCode = blankForNull(shipAddress.postalCode);
						tempShipAddress.country = blankForNull(shipAddress.country);
						tempShipAddress.SFDCAddressID = blankForNull(shipAddress.SFDCAddressID);
						shipList.add(tempShipAddress);
					}				
				}
				args.shippingAddresses = shipList;
			}
			
			//Church rewards
			if (dw.system.Site.getCurrent().getCustomPreferenceValue('ChurchRewardsProgramActive')) {
				if (empty(response.response.churchRewardsInfo)) {
					args.rewardsChurchId = null;
					args.rewardsChurchName = null;
					args.rewardsChurchPoints = 0;
					args.isChurchRewardsSponsor = false;
					args.rewardsSponsoredChurchAccountID = null;
				} else{
					if (!empty(response.response.churchRewardsInfo[0].isChurchRewardsSponsor) && response.response.churchRewardsInfo[0].isChurchRewardsSponsor) {
						args.rewardsChurchId = response.response.churchRewardsInfo[0].churchRewardsSponsoredChurchID;
						args.rewardsChurchName = response.response.churchRewardsInfo[0].churchRewardsSponsoredChurchName==null?"":response.response.churchRewardsInfo[0].churchRewardsSponsoredChurchName;
						args.rewardsSponsoredChurchPoints = response.response.churchRewardsInfo[0].churchRewardsSponsoredChurchPointsAvailable==null?0:parseInt(response.response.churchRewardsInfo[0].churchRewardsSponsoredChurchPointsAvailable.multiply(1));
						args.rewardsSponsoredChurchAccountID = response.response.churchRewardsInfo[0].churchRewardsSponsoredChurchSFDCAccountID;
						args.isChurchRewardsSponsor = true;					
					} else {
						args.rewardsChurchId = null;
						args.rewardsChurchName = null;
						args.rewardsChurchPoints = 0;
						args.isChurchRewardsSponsor = false;
						args.rewardsSponsoredChurchAccountID = null;
					}
				}
				
				if (args.customerType == "Commander") {
					args.rewardsChurchPoints = parseInt(response.response.customerGroupInfo[0].churchRewardsPointsAvailable);
				}
			}
			
			//*********************************************************************
			//GET DEMANDWARE CUSTOMER GROUPS
			//*********************************************************************	
			if (!empty(response.response.DWCustomerGroup)) {		
				var groupList:ArrayList = new dw.util.ArrayList();
				for each (dwCGroup in response.response.DWCustomerGroup) {
					groupList.add(dwCGroup.DWGroupName);
				}
				args.DWCustomerGroups = groupList;
			}
		} else {
			Logger.error(response.response.message);
			return PIPELET_ERROR;
		}
		
	}
	catch(e) {
		if(e instanceof Fault){
			Logger.error("Actor " + e.faultActor+" caused fault '"+e.faultCode +"' ("+e.faultString+" - "+e.faultDetail+")");
		}else{
			Logger.error(e.toString());
		}
		return PIPELET_ERROR;
	}
 
	return PIPELET_NEXT;
}

function blankForNull(inString : String) : String 
{
	if(inString==null)
  		return '';	
  	else
  		return inString;
  	
}