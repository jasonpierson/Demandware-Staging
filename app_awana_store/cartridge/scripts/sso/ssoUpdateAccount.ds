/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*	@input accountID : String
*   @input emailAddress : String 
*   @input firstName : String 
*   @input lastName : String 
*   @input password : String 
*	@output errorMessage : String
*
*/
importPackage( dw.system );
importPackage( dw.rpc );
importPackage( dw.util );

function execute( args : PipelineDictionary ) : Number
{
	var outputMsg : String;
	
	try {
		if(dw.system.Site.getCurrent().ID == 'kidzmatter') {
		    var webref : WebReference = webreferences.kmUpdateSFDCAccountDev;
		    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
		    	webref = webreferences.pKMUpdateSFDCAccount;
		    }
		} else {
		    var webref : WebReference = webreferences.UpdateSFDCAccountDev;
		    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
		    	webref = webreferences.pUpdateSFDCAccount;
		    }			
		}
		var stub : Stub = webref.defaultService; 
		
		var updateAccount:WebReference = new webref.UpdateSFDCAccountRequest();
		updateAccount.request = new webref.UpdateSFDCAccountRequestRequest();
		updateAccount.request.password = args.password;
		updateAccount.request.firstName = args.firstName;
		updateAccount.request.lastName = args.lastName;
		updateAccount.request.EMail = args.emailAddress;
		updateAccount.request.SFDCAccountID = args.accountID;
		
		if(dw.system.Site.getCurrent().ID == 'kidzmatter') {
		    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
		    	var response = stub.pKMUpdateSFDCAccount(updateAccount);
			} else {
				var response = stub.KMUpdateSFDCAccount(updateAccount);
			}			
		} else {
		    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
		    	var response = stub.pUpdateSFDCAccount(updateAccount);
			} else {
				var response = stub.updateSFDCAccount(updateAccount);
			}
		}
		
		if (!response.response.success) {
			args.errorMessage = response.response.message;
		}
	}
	catch(e) {
		if(e instanceof Fault){
			Logger.error("Actor " + e.faultActor+" caused fault '"+e.faultCode +"' ("+e.faultString+" - "+e.faultDetail+")");
		}else{
			Logger.error(e.toString());
		}
		return PIPELET_ERROR;
	}
 
   	return PIPELET_NEXT;

}
