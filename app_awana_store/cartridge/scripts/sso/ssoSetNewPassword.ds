/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input eMail : String 
*   @input password : String
*   @output errorMessage : String
*
*/
importPackage( dw.system );
importPackage( dw.rpc );
importPackage( dw.util );

function execute( args : PipelineDictionary ) : Number
{
	try {
	    var webref : WebReference = webreferences.SetPasswordDev;
	    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
	    	webref = webreferences.pSetPassword;
	    }
	    
		var stub : Stub = webref.defaultService; 
		
		var setPassword:WebReference = new webref.SetPasswordRequest();
		setPassword.request = new webref.SetPasswordRequestRequest();
		setPassword.request.EMail = args.eMail;
		setPassword.request.password = args.password;
		
		var response = stub.setPassword(setPassword);
		if (response.response.success) {
			args.errorMessage = "";
		} else {
			args.errorMessage = response.response.message;
			return PIPELET_ERROR;
		}
		
	}
	catch(e) {
		if(e instanceof Fault){
			Logger.error("Actor " + e.faultActor+" caused fault '"+e.faultCode +"' ("+e.faultString+" - "+e.faultDetail+")");
		}else{
			Logger.error(e.toString());
		}
		return PIPELET_ERROR;
	}
 
   	return PIPELET_NEXT;
}
