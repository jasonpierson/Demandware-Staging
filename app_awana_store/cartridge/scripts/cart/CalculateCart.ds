/**
 * CalculateCart.ds
 *
 * This script implements a typical shopping cart calculation algorithm.
 * The script is provided with the Demandware reference application. Some
 * parts of the calculation script are specific to the reference application
 * logic and might not be applicable to our customer's storefront applications.
 * However, the shopping cart calculation script can be customized to meet
 * specific needs and requirements.
 *
 * The script implements a complete recaculation of the shopping cart. This
 * includes the following steps:
 * - determine the prices of products contained in the cart
 * - determine the shipping cost for the shipments of the cart
 * - determine the tax rates of all line items of the cart
 * - determine and apply all types of promotions
 * - calculate the totals of shipments as well as the cart
 *
 * The script also handles gift certificate line items. In particular,
 * gift certificates are:
 * - not being taxed
 * - are not count towards order-level promotions
 * - are not count towards order-level shipping cost
 *
 * The script uses the shipping address associated with a shipment to determine 
 * the tax jurisidiction. If no shipping address is available, the default tax 
 * jurisdiction is used.
 *
 * Shipping cost for a shipment are calculated if a shipping method is assigned
 * to the shipment. If no shipping method is assigned to a shipment, shipping
 * is not calculated and set to N/A.
 *
 * @input  Basket : dw.order.Basket
 * @input  CallingPipeline : String
 */


 importPackage( dw.system );
 importPackage( dw.web );
 importPackage( dw.value );
 importPackage( dw.util );
 importPackage( dw.order );
 importPackage( dw.object );
 importPackage( dw.campaign );
 importPackage( dw.catalog );
 importPackage( dw.customer );
 importPackage( dw.rpc );

/**
 * Function: execute
 *
 * Main function of the calculation script.
 */
function execute( pdict : PipelineDictionary ) : Number
{
    // ===================================================
	// =====     	PROCESS INPUT PARAMETERS 		 =====
    // ===================================================

	var basket : Basket = pdict.Basket;
	var callingPipe : String = !empty(pdict.CallingPipeline)?pdict.CallingPipeline:"";
	
    // ===================================================
	// =====   CALCULATE PRODUCT LINE ITEM PRICES    =====
    // ===================================================

	calculateProductPrices(basket);
	
    // ===================================================
	// =====    CALCULATE GIFT CERTIFICATE PRICES    =====
    // ===================================================

	calculateGiftCertificatePrices(basket);
	
    // ===================================================
	// =====   Note: Promotions must be applied      =====
	// =====   after the tax calculation for         =====
	// =====   storefronts based on GROSS prices     =====
    // ===================================================
	
    // ===================================================
	// =====   APPLY PROMOTION DISCOUNTS			 =====
	// =====   Apply product and order promotions.   =====
	// =====   Must be done before shipping 		 =====
	// =====   calculation. 					     =====
    // ===================================================

	PromotionMgr.applyDiscounts(pdict.Basket);

    // ===================================================
	// =====        CALCULATE SHIPPING COSTS         =====
    // ===================================================

	// apply product specific shipping costs
	// and calculate total shipping costs
	ShippingMgr.applyShippingCost(basket);
	
    // ===================================================
	// =====   APPLY PROMOTION DISCOUNTS			 =====
	// =====   Apply product and order and 			 =====
	// =====   shipping promotions.                  =====
    // ===================================================

	PromotionMgr.applyDiscounts(pdict.Basket);

	// since we might have bonus product line items, we need to
	// reset product prices
	calculateProductPrices(basket);

    // ===================================================
	// =====         CALCULATE TAX                   =====
    // ===================================================
	calculateTax(basket, callingPipe);

    // ===================================================
	// =====         CALCULATE BASKET TOTALS         =====
    // ===================================================
	
	basket.updateTotals();

    // ===================================================
	// =====            DONE                         =====
    // ===================================================
	
    return PIPELET_NEXT;
}


/**
 * FUNCTION: calculateProductPrices
 *
 * Calculates product prices based on line item quantities. Set calculates prices
 * on the product line items.
 */
function calculateProductPrices(basket : Basket)
{
	// get total quantities for all products contained in the basket
	var productQuantities : HashMap = basket.getProductQuantities();
	
	// get product prices for the accumulated product quantities
	var products : Iterator = productQuantities.keySet().iterator();
	var productPrices : HashMap = new HashMap();
	
	while(products.hasNext())
	{
		var product : Product = products.next();
		var quantity : Quantity = productQuantities.get(product);
		productPrices.put(product, product.priceModel.getPrice(quantity));
	}
	
	// iterate all product line items of the basket and set prices
	var productLineItems : Iterator = basket.getAllProductLineItems().iterator();
	while(productLineItems.hasNext())
	{
		var productLineItem : ProductLineItem = productLineItems.next();
		
		// handle non-catalog products
		if(!productLineItem.catalogProduct)
		{
			productLineItem.setPriceValue(productLineItem.basePrice.valueOrNull);
			continue;
		}
		
		var product : Product = productLineItem.product;

		// handle option line items
		if(productLineItem.optionProductLineItem)
		{
			// for bonus option line items, we do not update the price
			// the price is set to 0.0 by the promotion engine
			if(!productLineItem.bonusProductLineItem)
			{
				productLineItem.updateOptionPrice();
			}
		}
		// handle bundle line items, but only if they're not a bonus
		else if(productLineItem.bundledProductLineItem)
		{
			// no price is set for bundled product line items
		}
		// handle bonus line items
		// the promotion engine set the price of a bonus product to 0.0
		// we update this price here to the actual product price just to
		// provide the total customer savings in the storefront
		// we have to update the product price as well as the bonus adjustment
		else if(productLineItem.bonusProductLineItem && product != null)
		{
			var price : Money = product.priceModel.price;
			productLineItem.setPriceValue(price.valueOrNull);
			// get the product quantity
			var quantity : Quantity = productLineItem.quantity;
			// we assume that a bonus line item has only one price adjustment
			var adjustments : Collection = productLineItem.priceAdjustments;
			if(!adjustments.isEmpty())
			{
				var adjustment : PriceAdjustment = adjustments.iterator().next();
				var adjustmentPrice : Money = price.multiply(quantity.value).multiply(-1.0);
				adjustment.setPriceValue(adjustmentPrice.valueOrNull);
			}
		}			
		
		// set the product price. Updates the 'basePrice' of the product line item,
		// and either the 'netPrice' or the 'grossPrice' based on the current taxation
		// policy
		
		// handle product line items unrelated to product
		else if(product == null)
		{
			productLineItem.setPriceValue(null);				
		}	
		// handle normal product line items
		else
		{
			productLineItem.setPriceValue(productPrices.get(product).valueOrNull);
		}
    }
}

/**
 * FUNCTION: calculateGiftCertificates
 *
 * Function sets either the net or gross price attribute of all gift certificate
 * line items of the basket by using the gift certificate base price.
 */
function calculateGiftCertificatePrices(basket : Basket)
{
	var giftCertificates : Iterator = basket.getGiftCertificateLineItems().iterator();
	while(giftCertificates.hasNext())
	{
		var giftCertificate : GiftCertificateLineItem = giftCertificates.next();
		giftCertificate.setPriceValue(giftCertificate.basePrice.valueOrNull);
	}
}	


/**
 * FUNCTION: calculateTax <p>
 *
 * Determines tax rates for all line items of the basket. Uses the shipping addresses
 * associated with the basket shipments to determine the appropriate tax jurisdiction. 
 * Uses the tax class assigned to products and shipping methods to lookup tax rates. <p>
 *
 * Sets the tax-related fields of the line items. <p>
 *
 * Handles gift certificates, which aren't taxable. <p>
 *
 * Note that the function implements a fallback to the default tax jurisdiction
 * if no other jurisdiction matches the specified shipping location/shipping address.<p>
 *
 * Note that the function implements a fallback to the default tax class if a
 * product or a shipping method does explicitely define a tax class.
 */
function calculateTax(basket : Basket, callingPipe : String)
{
	var shipments : Iterator = basket.getShipments().iterator();
	while(shipments.hasNext())
	{
		var shipment : Shipment = shipments.next();

		// first we reset all tax fields of all the line items
		// of the shipment
		var shipmentLineItems : Iterator = shipment.getAllLineItems().iterator();
		while(shipmentLineItems.hasNext())
		{
			var lineItem : LineItem = shipmentLineItems.next();
			// do not touch tax rate for fix rate items
			if(lineItem.taxClassID == TaxMgr.customRateTaxClassID)
			{
				lineItem.updateTax(lineItem.taxRate);
			}
			else
			{
				lineItem.updateTax(null);
			}
		}
		
		// identify the appropriate tax jurisdiction
		var taxJurisdictionID : String = null;
		
		// if we have a shipping address, we can determine a tax jurisdiction for it
		if(shipment.shippingAddress != null)
		{
			var location : ShippingLocation = new ShippingLocation(shipment.shippingAddress);
			taxJurisdictionID = TaxMgr.getTaxJurisdictionID(location);
		}
		
		if(taxJurisdictionID == null)
		{
			taxJurisdictionID = TaxMgr.defaultTaxJurisdictionID;
		}
		
		// if we have no tax jurisdiction, we cannot calculate tax
		if(taxJurisdictionID == null)
		{
			continue;
		}

		//Try getting tax for shipment
		var accountID : String = "0";
		if (basket.customer.authenticated) {
			accountID = !empty(basket.customer.profile.custom.SFMailingAddressBookID)?basket.customer.profile.custom.SFMailingAddressBookID:"0";
		} 
		
		var taxRateFromService : Number = getTaxForShipmentLineItems(shipment, taxJurisdictionID, accountID, basket, callingPipe);
		if (taxRateFromService != -100) {
			//iterate through items and set tax
			var taxValue : String;
			var tempCount:Number = 0;
			var shipmentLineItems2 : Iterator = shipment.getAllLineItems().iterator();
			while(shipmentLineItems2.hasNext())
			{
				
				// first we reset all line item tax attributes
				var lineItem2 : LineItem = shipmentLineItems2.next();
				
				if (lineItem2 instanceof ProductLineItem)
					tempCount++;
					
				
				if (tempCount >= 1 && lineItem2 instanceof ProductLineItem){
					//Logger.debug("Setting tax" + basket.adjustedMerchandizeTotalNetPrice.value);
					lineItem2.updateTax(taxRateFromService/basket.merchandizeTotalNetPrice.value);
					//taxValue = String(lineItem2.taxBasis.value*(taxRateFromService/basket.merchandizeTotalNetPrice.value));
					//lineItem2.setTax(new Money(parseFloat(taxValue), basket.currencyCode));
	            	basket.updateTotals();
				}
	          	else
	            	lineItem2.updateTax(0);
				
	        }	
		}
	}
	
	// besides shipment line items, we need to calculate tax for possible order-level price adjustments
    // this includes order-level shipping price adjustments
    if(!basket.getPriceAdjustments().empty || !basket.getShippingPriceAdjustments().empty)
    {
        // calculate a mix tax rate from
        var basketPriceAdjustmentsTaxRate : Number = (basket.getMerchandizeTotalGrossPrice().value / basket.getMerchandizeTotalNetPrice().value) - 1; 	
	        	
	    var basketPriceAdjustments : Iterator = basket.getPriceAdjustments().iterator();
	    while(basketPriceAdjustments.hasNext())
	    {
			var basketPriceAdjustment : PriceAdjustment = basketPriceAdjustments.next();
			basketPriceAdjustment.updateTax(basketPriceAdjustmentsTaxRate); 
			
			//if tax is negative, make it 0
			if (!empty(basketPriceAdjustment) && basketPriceAdjustment.tax < 0) {
				basketPriceAdjustment.updateTax(0);        	
		    }				       	
	    }    

	    var basketShippingPriceAdjustments : Iterator = basket.getShippingPriceAdjustments().iterator();
	    while(basketShippingPriceAdjustments.hasNext())
	    {
			var basketShippingPriceAdjustment : PriceAdjustment = basketShippingPriceAdjustments.next();
			basketShippingPriceAdjustment.updateTax(basketPriceAdjustmentsTaxRate); 
			
			//if tax is negative, make it 0
			if (!empty(basketShippingPriceAdjustment) && basketShippingPriceAdjustment.tax < 0) {
				basketShippingPriceAdjustment.updateTax(0);        	
		    }			       	
	    }	    
	}
}

function getTaxForLineItem(shippingAddress:OrderAddress, lineItemID : String, lineItemPrice : dw.value.Money, lineItemQty : Number) : Number {

	try {
		
		var webref : WebReference = webreferences.Avalara;
		var stub : Stub = webref.defaultService; 
		
		var request:WebReference = new webref.GetTax();
		
		request.lineNo = "1";
		request.accountId = "102496";
		request.itemNumber = lineItemID;
		request.extendedPrice = lineItemPrice*lineItemQty;
		request.quantity = lineItemQty;		
		request.lineOneOrigin = dw.system.Site.getCurrent().getCustomPreferenceValue('TaxOriginAddress1');
		request.lineTwoOrigin = "";
		request.lineThreeOrigin = "";
		request.cityOrigin = dw.system.Site.getCurrent().getCustomPreferenceValue('TaxOriginCity');
		request.regionOrigin = dw.system.Site.getCurrent().getCustomPreferenceValue('TaxOriginRegion');
		request.zipCodeOrigin = dw.system.Site.getCurrent().getCustomPreferenceValue('TaxOriginPostcode');
		request.countryOrigin = dw.system.Site.getCurrent().getCustomPreferenceValue('TaxOriginCountry');

		request.lineOneDestination = shippingAddress.address1;
		request.lineTwoDestination = shippingAddress.address2!=null?shippingAddress.address2:"";
		request.lineThreeDestination = "";
		request.cityDestination = shippingAddress.city;
		request.regionDestination = shippingAddress.stateCode;
		request.zipCodeDestination = shippingAddress.postalCode;
		request.countryDestination = shippingAddress.countryCode.displayValue;
		
		request.docCode = "";
	    if (dw.system.Site.getCurrent().ID != 'AwanaCA') {
			request.docType = "SalesOrder";
		} else if (dw.system.Site.getCurrent().ID == 'AwanaCA' && !empty(callingPipe) && callingPipe == 'COPlaceOrder-Start') {
			request.docType = "SalesInvoice";
	    } else {
			request.docType = "";
		}
		request.taxOverrideReason = "";
		request.PONumber = "";
		
		if (dw.system.Site.getCurrent().ID == 'AwanaCA' && !empty(callingPipe) && callingPipe == 'COPlaceOrder-Start') {
			request.commit = "true";
		} else {
			request.commit = "false";
		}
		request.companyCode = dw.system.Site.getCurrent().getCustomPreferenceValue('TaxCompanyCode');
		request.taxIncluded = dw.system.Site.getCurrent().getCustomPreferenceValue('TaxIncluded');
		
		var dateNow : Date = new Date();
		request.taxDate = (dateNow.getMonth()+1).toString() + "/" + dateNow.getDate().toString() + "/" + dateNow.getFullYear().toString();
		
		var response = stub.getTax(request);
		if (response.getTaxResult[0].totalTax == 0 && response.getTaxResult[0].message != "") {
			//Error in web service, return 0 for tax amount
			Logger.debug("Error in tax service {0}", response.getTaxResult[0].message);
			return -100;
		}
		
		//if tax is negative, make it 0
		if (!empty(response.getTaxResult[0].totalTax) && response.getTaxResult[0].totalTax < 0) {
			response.getTaxResult[0].totalTax.updateTax(0);        	
	    }
	    		
		return (response.getTaxResult[0].totalTax/(lineItemPrice*lineItemQty));
	}
	catch(e) {
		if(e instanceof Fault){
			Logger.error("Actor " + e.faultActor+" caused fault '"+e.faultCode +"' ("+e.faultString+" - "+e.faultDetail+")");
		}else{
			Logger.error(e.toString());
		}
		return -100;
	}
}

function getTaxForShipmentLineItems(shipment : Shipment, taxJurisdictionID : String, accountID : String, basket : Basket, callingPipe : String) : Number {

	// shipping address and tax juridisction are available
	var shipmentLineItems : Iterator = shipment.getAllLineItems().iterator();
	//values for tax from web service, collect all line items
    var lineNo : Number = 1;
	var itemID : String = "";
    var itemPrice : String = "";
    var itemQty : String = "";
	var itemLineNum : String = "";
	var taxIncluded : String = "";
	var hasProductShippingLineItem : Boolean = false;
	var productShippingLineItem : Number = 0;
	var tax : Number = 0;
		
	var shipmentLineItems : Iterator = shipment.getAllLineItems().iterator();	
	while(shipmentLineItems.hasNext())
	{
		var lineItem : LineItem = shipmentLineItems.next();
		var taxClassID : String = lineItem.taxClassID;
			
		if (dw.system.Site.getCurrent().getCustomPreferenceValue('SplitOrdersWithDonations') && lineItem instanceof ProductLineItem  && !empty(lineItem.product.custom.ProductType) && lineItem.product.custom.ProductType.value == 'Donation') {
			continue;
		} else {
			Logger.debug("1. Line Item {0} with Tax Class {1} and Tax Rate {2}", lineItem.lineItemText, lineItem.taxClassID, lineItem.taxRate);
			
			// do not touch line items with fix tax rate
			if(taxClassID == TaxMgr.customRateTaxClassID)
			{
				continue;
			}
	
			// line item does not define a valid tax class; let's fall back to default tax class
			if(taxClassID == null)
			{
				taxClassID = TaxMgr.defaultTaxClassID;
			}
	
			// if we have no tax class, we cannot calculate tax
			if(taxClassID == null)
			{
				continue;
			}	
			
			// get the tax rate
			var taxRate : Number = TaxMgr.getTaxRate(taxClassID, taxJurisdictionID);
			// w/o a valid tax rate, we cannot calculate tax for the line item
			if(taxRate == null)
			{
				continue;
			}				
		
			// calculate the tax of the line item	
			lineItem.updateTax(taxRate);
	        
	        if ((lineItem.priceValue != 0 && lineItem instanceof ProductLineItem) || (lineItem.priceValue != 0 && lineItem instanceof ShippingLineItem) || (lineItem.priceValue != 0 && lineItem instanceof ProductShippingLineItem) || (lineItem.priceValue != 0 && lineItem instanceof GiftCertificateLineItem)) {
		        //Prepare variables for web service call
		       	if (lineItem instanceof ProductLineItem && shipment.shippingAddress != null) {
					itemID = (itemID=="")?lineItem.productID:itemID + "," + lineItem.productID;
					itemQty = (itemQty=="")?lineItem.quantityValue.toFixed():itemQty + "," + lineItem.quantityValue.toFixed();
					
					if (!empty(dw.system.Site.getCurrent().getCustomPreferenceValue('TaxIncluded')) && dw.system.Site.getCurrent().getCustomPreferenceValue('TaxIncluded')) {
						var ProductExcludes = dw.system.Site.getCurrent().getCustomPreferenceValue('ProductsExcludedFromTaxInclusion');
						var HasExclusion : Boolean = false;
						for (var i = 0; i < ProductExcludes.length; i++) {
							if (ProductExcludes[i] == lineItem.productID) {
								taxIncluded = taxIncluded==""?"false": taxIncluded+ ",false";
								HasExclusion = true;
								break;
							} 
						}
						if (!HasExclusion) {
							taxIncluded = taxIncluded==""?"true": taxIncluded+ ",true";
						}
					}					
		        }
		        else if ((lineItem instanceof ShippingLineItem || lineItem instanceof ShippingLineItem) && shipment.shippingAddress != null) {
					itemID = (itemID=="")?lineItem.campaignID:itemID + "," + dw.system.Site.getCurrent().getCustomPreferenceValue('ShippingProductCode');
					itemQty = (itemQty=="")?"1":itemQty + ",1";
					taxIncluded = taxIncluded==""?"false": taxIncluded+ ",false";
		        }
	
				if ((lineItem instanceof ProductLineItem && shipment.shippingAddress != null) || (lineItem instanceof ShippingLineItem && shipment.shippingAddress != null)) {
					//if the product has a discount, tax on the discounted price
					if (!empty(lineItem.adjustedNetPrice.value) && lineItem.adjustedNetPrice.value >= 0) {
						var extPrice : Number = lineItem.adjustedNetPrice.value;
					} else {
						var extPrice : Number = (lineItem.priceValue==null)?0:lineItem.priceValue;
					}			
				} else {
					var extPrice : Number = (lineItem.priceValue==null)?0:lineItem.priceValue;
				}
				
				if (lineItem instanceof ProductShippingLineItem) {
					hasProductShippingLineItem = true;
					productShippingLineItem = productShippingLineItem + lineItem.priceValue;
				} else {
					//split order if statement
					itemLineNum = (itemLineNum=="")?lineNo.toFixed():itemLineNum + "," + lineNo.toFixed();
					itemPrice = (itemPrice == "")?extPrice.toString():itemPrice + "," + extPrice.toString();
					lineNo++;
				}
	        }
		}
	}
	
    /**************************************************************************************************
     HANDLE ANY ITEMS OF TYPE PRODUCTSHIPPINGLINEITEM
    **************************************************************************************************/
    if (!empty(hasProductShippingLineItem) && hasProductShippingLineItem) {
    	itemLineNum = (itemLineNum=="")?lineNo.toFixed():itemLineNum + "," + lineNo.toFixed();
		itemID = itemID + "," + dw.system.Site.getCurrent().getCustomPreferenceValue('ShippingProductCode');
		itemQty = (itemQty=="")?"1":itemQty + ",1";
		var extPrice : Number = productShippingLineItem;
		itemPrice = (itemPrice == "")?extPrice.toString():itemPrice + "," + extPrice.toString();
		taxIncluded = taxIncluded==""?"false": taxIncluded+ ",false";
    }	
	
	
	if ((!empty(dw.system.Site.getCurrent().getCustomPreferenceValue('WhenToCalculateTax')) && dw.system.Site.getCurrent().getCustomPreferenceValue('WhenToCalculateTax') == 'Checkout') || (!empty(dw.system.Site.getCurrent().getCustomPreferenceValue('WhenToCalculateTax')) && dw.system.Site.getCurrent().getCustomPreferenceValue('WhenToCalculateTax') == 'ExportToOMS' && !empty(callingPipe) && callingPipe == 'COPlaceOrder-Start' && !empty(itemID))) {
		try {
			
			var webref : WebReference = webreferences.Avalara;
		    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
				webref = webreferences.pAvalara;
			}
			var stub : Stub = webref.defaultService; 
			
			var request:WebReference = new webref.GetTax();
			
			request.lineNo = itemLineNum;
			request.accountId = accountID;
			request.itemNumber = itemID;
			request.extendedPrice = itemPrice;
			request.quantity = itemQty;		
			
			request.lineOneOrigin = dw.system.Site.getCurrent().getCustomPreferenceValue('TaxOriginAddress1');
			request.lineTwoOrigin = "";
			request.lineThreeOrigin = "";
			request.cityOrigin = dw.system.Site.getCurrent().getCustomPreferenceValue('TaxOriginCity');
			request.regionOrigin = dw.system.Site.getCurrent().getCustomPreferenceValue('TaxOriginRegion');
			request.zipCodeOrigin = dw.system.Site.getCurrent().getCustomPreferenceValue('TaxOriginPostcode');
			request.countryOrigin = dw.system.Site.getCurrent().getCustomPreferenceValue('TaxOriginCountry');
	
			request.lineOneDestination = shipment.shippingAddress!=null&&shipment.shippingAddress.address1!=null?shipment.shippingAddress.address1:"";
			request.lineTwoDestination = shipment.shippingAddress!=null&&shipment.shippingAddress.address2!=null?shipment.shippingAddress.address2:"";
			request.lineThreeDestination = "";
			request.cityDestination = shipment.shippingAddress!=null&&shipment.shippingAddress.city!=null?shipment.shippingAddress.city:"";
			request.regionDestination = shipment.shippingAddress!=null&&shipment.shippingAddress.stateCode!=null?shipment.shippingAddress.stateCode:"";
			request.zipCodeDestination = shipment.shippingAddress!=null&&shipment.shippingAddress.postalCode!=null?shipment.shippingAddress.postalCode:"";
			request.countryDestination = shipment.shippingAddress!=null?shipment.shippingAddress.countryCode.displayValue:"";
			
			request.docCode = "";
		    if (dw.system.Site.getCurrent().ID != 'AwanaCA') {
				request.docType = "SalesOrder";
			} else if (dw.system.Site.getCurrent().ID == 'AwanaCA' && !empty(callingPipe) && callingPipe == 'COPlaceOrder-Start') {
				request.docType = "SalesInvoice";
		    } else {
				request.docType = "";
			}
			request.taxOverrideReason = "";
			request.PONumber = "";
			
			if (dw.system.Site.getCurrent().ID == 'AwanaCA' && !empty(callingPipe) && callingPipe == 'COPlaceOrder-Start') {
				request.commit = "true";
			} else {
				request.commit = "false";
			}
			
			request.companyCode = dw.system.Site.getCurrent().getCustomPreferenceValue('TaxCompanyCode');
			request.taxIncluded = taxIncluded;
			
			var dateNow : Date = new Date();
			request.taxDate = (dateNow.getMonth()+1).toString() + "/" + dateNow.getDate().toString() + "/" + dateNow.getFullYear().toString();
			
			var response = stub.getTax(request);
			if (response.getTaxResult[0].totalTax == 0 && response.getTaxResult[0].message != "") {
				//Error in web service, return 0 for tax amount
				Logger.debug("Error in tax service {0}", response.getTaxResult[0].message);
				return -100;
			}
			
			//if tax is negative, make it 0
			if (empty(response.getTaxResult[0].totalTax) || !empty(response.getTaxResult[0].totalTax) && response.getTaxResult[0].totalTax < 0) {
				response.getTaxResult[0].totalTax = 0;        	
		    }	
		    	
			return response.getTaxResult[0].totalTax;
		}
		catch(e) {
			if(e instanceof Fault){
				Logger.error("Actor " + e.faultActor+" caused fault '"+e.faultCode +"' ("+e.faultString+" - "+e.faultDetail+")");
			}else{
				Logger.error(e.toString());
			}
			return -100;
		}
	} else {
		return 0;
	}
}