/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input churchName : String
*   @input zipCode : String
*   @output churchResults : dw.util.List
*   @output errorMessage : String
*
*/
importPackage( dw.system );
importPackage( dw.object );
importPackage( dw.rpc );
importPackage( dw.util );

function execute( args : PipelineDictionary ) : Number
{

	try {
	    var webref : WebReference = webreferences.GetChurchInfoDev;
	    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
	    	webref = webreferences.pGetChurchInfo;
	    }
	    
		var stub : Stub = webref.defaultService; 
		var getChurchInfo:WebReference = new webref.GetChurchInfoRequest();
		getChurchInfo.request = new webref.GetChurchInfoRequestRequest();
		getChurchInfo.request.churchName = args.churchName;
		getChurchInfo.request.postalCode = args.zipCode;
		
		var response = stub.getChurchInfo(getChurchInfo);
		
		if (response.response.success) {
			var churchList:ArrayList = new dw.util.ArrayList();
			for each (churchInfoItem in response.response.churchInfo) {
				var tempChurchItem : Object = new Object();
				tempChurchItem.SFDCAccountID = churchInfoItem.SFDCAddressID;
				tempChurchItem.registrationNumber = churchInfoItem.registrationNumber;
				tempChurchItem.name = churchInfoItem.name;
				tempChurchItem.city = churchInfoItem.city;
				tempChurchItem.state = churchInfoItem.state;
				tempChurchItem.postalCode = churchInfoItem.postalCode;
				tempChurchItem.churchRewardsSponsoredChurchPointsAvailable = churchInfoItem.churchRewardsSponsoredChurchPointsAvailable;
				churchList.add(tempChurchItem);
			}
			args.churchResults = churchList;
		} else {
			args.errorMessage = response.response.message;
			return PIPELET_NEXT;
		}
	} catch(e) {
		if(e instanceof Fault){
			Logger.error("Actor " + e.faultActor+" caused fault '"+e.faultCode +"' ("+e.faultString+" - "+e.faultDetail+")");
		}else{
			Logger.error(e.toString());
		}
		return PIPELET_ERROR;
	}
	
   	return PIPELET_NEXT;
}
