/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input subscription : Object
*   @output errorMessage : String
*
*/
importPackage( dw.system );

function execute( args : PipelineDictionary ) : Number
{
    var subscriptionObject : Object = args.subscription;  
    
	try {
	    var webref : WebReference = webreferences.KMExportSubscriptionsDev;
	    if ((dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) || dw.system.Site.getCurrent().getCustomPreferenceValue('useProductionWebServices')) {
	    	webref = webreferences.pKMExportSubscriptions;
	    }
		var stub : Stub = webref.defaultService; 
		var createSubscription:WebReference = new webref.ExportSubscriptionRequest();
		createSubscription.request = new webref.ExportSubscriptionRequestRequest();
	
		createSubscription.request.dateOfCustomerConfirmation = subscriptionObject.custom.DateOfCustomerConfirmation;
		createSubscription.request.EMail = subscriptionObject.custom.EMail;
		createSubscription.request.firstName = subscriptionObject.custom.FirstName;
		createSubscription.request.lastName = subscriptionObject.custom.LastName;
		createSubscription.request.newsletter = subscriptionObject.custom.Newsletter;
		createSubscription.request.SFDCContactID = subscriptionObject.custom.SFDCContactID;
		
		//create subscription in SFDC
		var response = stub.exportSubscriptions(createSubscription);
		if (response.response.success == true) {
			subscriptionObject.custom.ExportStatus = 'Exported';
		} else {
			Logger.error(response.response.message);
			args.errorMessage = response.response.message;
			return PIPELET_NEXT;
		}
	}
	catch(e) {
		if(e instanceof Fault){
			Logger.error("Actor " + e.faultActor+" caused fault '"+e.faultCode +"' ("+e.faultString+" - "+e.faultDetail+")");
		}else{
			Logger.error(e.toString());
		}
		return PIPELET_ERROR;
	}
 	return PIPELET_NEXT;
}